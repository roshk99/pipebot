#!/usr/bin/env python

import rospy
import math
import numpy as np

from sensor_msgs.msg import LaserScan, PointCloud
from geometry_msgs.msg import Point32

MINDIST = 0.05299999937415123
rotation = 78.0*math.pi/180.0
#rotation = 0.0

def main(data):

    #rospy.loginfo("Raw Data Angle Max:" + str(data.angle_max))
    anglemin = data.angle_min
    angleincrement = data.angle_increment
    anglemax = data.angle_max
    angles = xfrange(anglemin, anglemax+angleincrement, angleincrement)
    
    distances = data.ranges
    #distances = [0.0, 0.14499999582767487, 0.14800000190734863, 0.1509999930858612, 0.15399999916553497, 0.15700000524520874, 0.1589999943971634, 0.16300000250339508, 0.16599999368190765, 0.16899999976158142, 0.1720000058412552, 0.17499999701976776, 0.17800000309944153, 0.1809999942779541, 0.18400000035762787, 0.18700000643730164, 0.19099999964237213, 0.1940000057220459, 0.19699999690055847, 0.20100000500679016, 0.20399999618530273, 0.20800000429153442, 0.210999995470047, 0.21400000154972076, 0.21799999475479126, 0.22100000083446503, 0.2240000069141388, 0.22699999809265137, 0.23100000619888306, 0.23499999940395355, 0.23800000548362732, 0.2409999966621399, 0.24500000476837158, 0.24799999594688416, 0.25200000405311584, 0.2549999952316284, 0.257999986410141, 0.2619999945163727, 0.26499998569488525, 0.2680000066757202, 0.2720000147819519, 0.2750000059604645, 0.27799999713897705, 0.28200000524520874, 0.2930000126361847, 0.296999990940094, 0.29899999499320984, 0.3009999990463257, 0.30399999022483826, 0.3059999942779541, 0.3089999854564667, 0.3140000104904175, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.003000000026077032, 0.003000000026077032, 0.13199999928474426, 0.14000000059604645, 0.14800000190734863, 0.15600000321865082, 0.16500000655651093, 0.17499999701976776, 0.1860000044107437, 0.19900000095367432, 0.21400000154972076, 0.23100000619888306, 0.25, 0.2720000147819519, 0.29899999499320984, 0.32899999618530273, 0.3659999966621399, 0.4059999883174896, 0.45399999618530273, 0.5080000162124634, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.4000000059604645, 0.05299999937415123, 0.05299999937415123, 0.3370000123977661, 0.3199999928474426, 0.30399999022483826, 0.289000004529953, 0.2759999930858612, 0.2639999985694885, 0.2529999911785126, 0.24199999868869781, 0.2329999953508377, 0.2240000069141388, 0.2150000035762787, 0.20800000429153442, 0.20000000298023224, 0.1940000057220459, 0.18700000643730164, 0.1809999942779541, 0.17599999904632568, 0.17100000381469727, 0.16599999368190765, 0.16099999845027924, 0.15700000524520874, 0.15199999511241913, 0.14800000190734863, 0.14399999380111694, 0.14000000059604645, 0.13600000739097595, 0.13300000131130219, 0.05299999937415123, 0.003000000026077032, 0.003000000026077032, 0.003000000026077032, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.003000000026077032, 0.003000000026077032, 0.003000000026077032, 0.003000000026077032, 0.003000000026077032, 0.003000000026077032, 0.003000000026077032, 0.1340000033378601, 0.13699999451637268, 0.13899999856948853, 0.142000004649162]
    points = []
    xvec = []
    yvec = []
    for angle, distance in zip(angles, distances):
        if distance > MINDIST:
            x = distance*math.cos(angle+rotation)
            y = distance*math.sin(angle+rotation)
            if y > 0.0:
                xvec.append(x)
                yvec.append(y)
                point = Point32(x=x, y=y, z=0.0)
                points.append(point)
    #print 'x=', xvec, ';y=', yvec, ';'
    print 'x=', xvec
    print 'y=', yvec
    print ''
    print ''
    points = PointCloud(points=points)
    pub = rospy.Publisher('processedData', PointCloud, queue_size=10)
    pub.publish(points)

    
def xfrange(start, stop, step):
    range_vec = []
    i = 0
    while start + i * step < stop:
        range_vec.append(start + i * step)
        i += 1
    return range_vec